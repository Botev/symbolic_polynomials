var searchIndex = {};
searchIndex['symbolic_polynomials'] = {"items":[[0,"","symbolic_polynomials","This is a module for manipulation of symbolic polynomials overs the integers.\nUnfortunately, at this stage since `Rust` does not support integers as Generic types,\nthe only possible implementation of `SymMonomials` is with a vector. This in terms means\nthat it can not implement the `Copy` trait, for which reason currently all operations are\ndefined for references to the actual structures. If this changes in the future I will\nupdate the module accordingly.",null,null],[3,"SymMonomial","","An implementation for a monomial over the integers.",null,null],[12,"coefficient","","",0,null],[12,"powers","","",0,null],[3,"SymPolynomial","","A symbolic polynomial over the integers.",null,null],[12,"monomials","","",1,null],[17,"DEFAULT_VARIABLES","","The default number of symbolic variables for now is set 10",null,null],[11,"fmt","","",0,{"inputs":[{"name":"symmonomial"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"symmonomial"}],"output":{"name":"symmonomial"}}],[11,"is_const","","Checks if the monomial is a constant",0,{"inputs":[{"name":"symmonomial"}],"output":{"name":"bool"}}],[11,"new","","Creates a new monomial with the given number of symbolic variables.\nCoefficient is initialised to 1.",0,{"inputs":[{"name":"symmonomial"},{"name":"usize"}],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[{"name":"symmonomial"}],"output":{"name":"self"}}],[11,"eq","","",0,{"inputs":[{"name":"symmonomial"},{"name":"symmonomial"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"symmonomial"},{"name":"symmonomial"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"symmonomial"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"symmonomial"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"sympolynomial"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"sympolynomial"}],"output":{"name":"sympolynomial"}}],[11,"default","","",1,{"inputs":[{"name":"sympolynomial"}],"output":{"name":"self"}}],[11,"is_const","","Checks if the monomial is a constant",1,{"inputs":[{"name":"sympolynomial"}],"output":{"name":"bool"}}],[11,"new","","Createse a new symbolic polynomial with the given number of variables",1,{"inputs":[{"name":"sympolynomial"},{"name":"usize"}],"output":{"name":"self"}}],[11,"get_first_order","","Returns a symolic polynomial representing the `var` variable in order to the power 1.",1,{"inputs":[{"name":"sympolynomial"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"get_constant","","Returns a symolic polynomial representing the constant value",1,{"inputs":[{"name":"sympolynomial"},{"name":"i32"},{"name":"usize"}],"output":{"name":"self"}}],[11,"simplify","","The method \"simplifies\" the polynomial to its minimal form.\nIt combines monomials which have the same powers of each symbolic variables and \nremoving any monomials which are equal to 0. Before you perform any methods,\nsuch as addition, mutliplication and etc. you should always call simplify.\n# Examples\n```\n# use symbolic_polynomials::*;\n// simplify(2x^2y^3 + x^2y^3) = 3x^2y^3\nlet mut mon1 = SymMonomial::new(2);\nmon1.coefficient = 2;\nmon1.powers[0] = 2;\nmon1.powers[1] = 3;\nlet mut mon2 = SymMonomial::new(2);\nmon2.powers[0] = 2;\nmon2.powers[1] = 3;\nlet mut mon3 = SymMonomial::new(2);\nmon3.coefficient = 0;\nlet mut poly = SymPolynomial::new(2);\npoly.monomials.push(mon1);\npoly.monomials.push(mon2);\npoly.monomials.push(mon3);\npoly.simplify();\nassert!(poly.monomials.len() == 1);\nassert!(poly.monomials[0].coefficient == 3);\nassert!(poly.monomials[0].powers.len() == 2);\nassert!(poly.monomials[0].powers[0] == 2);\nassert!(poly.monomials[0].powers[1] == 3);\n```",1,{"inputs":[{"name":"sympolynomial"}],"output":null}],[11,"eq","","",1,{"inputs":[{"name":"sympolynomial"},{"name":"sympolynomial"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"sympolynomial"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"SymMonomial"],[3,"SymPolynomial"]]};
initSearch(searchIndex);
